// Code generated by fileb0x at "2019-07-28 17:28:08.572897 -0700 PDT m=+0.003330689" from config file "b0x.yml" DO NOT EDIT.
// modification hash(b424831dc50ce66a287fbc5c3f66bd29.a41a520c36561c496b545fd4a1388a0a)

package bigqueries

import (
	"bytes"

	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileSQLTeamGamesSQL is "sql/team_games.sql"
var FileSQLTeamGamesSQL = []byte("\x53\x45\x4c\x45\x43\x54\x0a\x20\x20\x67\x61\x6d\x65\x49\x64\x0a\x46\x52\x4f\x4d\x0a\x20\x20\x2f\x2a\x20\x3c\x70\x72\x6f\x6a\x65\x63\x74\x3e\x2e\x3c\x64\x61\x74\x61\x73\x65\x74\x3e\x2e\x3c\x74\x61\x62\x6c\x65\x3e\x20\x2a\x2f\x0a\x20\x20\x60\x25\x5b\x31\x5d\x73\x2e\x25\x5b\x32\x5d\x73\x2e\x25\x5b\x33\x5d\x73\x60\x0a\x4c\x49\x4d\x49\x54\x0a\x20\x20\x35\x30\x30\x0a")

// FileSQLTeamMatchesViewSQL is "sql/team_matches_view.sql"
var FileSQLTeamMatchesViewSQL = []byte("\x57\x49\x54\x48\x0a\x20\x20\x71\x75\x65\x72\x79\x20\x41\x53\x20\x28\x0a\x20\x20\x20\x20\x2f\x2a\x20\x40\x6d\x65\x6d\x62\x65\x72\x73\x3a\x20\x5b\x5d\x73\x74\x72\x69\x6e\x67\x20\x2a\x2f\x0a\x20\x20\x20\x20\x53\x45\x4c\x45\x43\x54\x20\x5b\x20\x25\x5b\x31\x5d\x73\x20\x5d\x20\x41\x53\x20\x6d\x65\x6d\x62\x65\x72\x73\x0a\x20\x20\x29\x2c\x0a\x20\x20\x63\x61\x6e\x64\x69\x64\x61\x74\x65\x47\x61\x6d\x65\x73\x20\x41\x53\x20\x28\x0a\x20\x20\x20\x20\x53\x45\x4c\x45\x43\x54\x0a\x20\x20\x20\x20\x20\x20\x6d\x61\x74\x63\x68\x2e\x67\x61\x6d\x65\x49\x64\x2c\x0a\x20\x20\x20\x20\x20\x20\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x2e\x74\x65\x61\x6d\x49\x64\x2c\x0a\x20\x20\x20\x20\x20\x20\x6d\x65\x6d\x62\x65\x72\x0a\x20\x20\x20\x20\x46\x52\x4f\x4d\x0a\x20\x20\x20\x20\x20\x20\x2f\x2a\x20\x3c\x70\x72\x6f\x6a\x65\x63\x74\x3e\x2e\x3c\x64\x61\x74\x61\x73\x65\x74\x3e\x2e\x3c\x74\x61\x62\x6c\x65\x3e\x20\x2a\x2f\x0a\x20\x20\x20\x20\x20\x20\x60\x25\x5b\x32\x5d\x73\x2e\x25\x5b\x33\x5d\x73\x2e\x25\x5b\x34\x5d\x73\x60\x20\x61\x73\x20\x6d\x61\x74\x63\x68\x2c\x0a\x20\x20\x20\x20\x20\x20\x71\x75\x65\x72\x79\x2c\x0a\x20\x20\x20\x20\x20\x20\x55\x4e\x4e\x45\x53\x54\x28\x6d\x61\x74\x63\x68\x2e\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x49\x64\x65\x6e\x74\x69\x74\x69\x65\x73\x29\x20\x41\x53\x20\x69\x64\x65\x6e\x74\x69\x74\x79\x0a\x20\x20\x20\x20\x4a\x4f\x49\x4e\x0a\x20\x20\x20\x20\x20\x20\x55\x4e\x4e\x45\x53\x54\x28\x6d\x65\x6d\x62\x65\x72\x73\x29\x20\x41\x53\x20\x6d\x65\x6d\x62\x65\x72\x0a\x20\x20\x20\x20\x4f\x4e\x20\x28\x0a\x20\x20\x20\x20\x20\x20\x69\x64\x65\x6e\x74\x69\x74\x79\x2e\x70\x6c\x61\x79\x65\x72\x2e\x63\x75\x72\x72\x65\x6e\x74\x41\x63\x63\x6f\x75\x6e\x74\x49\x64\x20\x3d\x20\x6d\x65\x6d\x62\x65\x72\x0a\x20\x20\x20\x20\x20\x20\x4f\x52\x20\x69\x64\x65\x6e\x74\x69\x74\x79\x2e\x70\x6c\x61\x79\x65\x72\x2e\x61\x63\x63\x6f\x75\x6e\x74\x49\x64\x20\x3d\x20\x6d\x65\x6d\x62\x65\x72\x0a\x20\x20\x20\x20\x29\x0a\x20\x20\x20\x20\x4a\x4f\x49\x4e\x0a\x20\x20\x20\x20\x20\x20\x55\x4e\x4e\x45\x53\x54\x28\x6d\x61\x74\x63\x68\x2e\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x73\x29\x20\x41\x53\x20\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x0a\x20\x20\x20\x20\x4f\x4e\x0a\x20\x20\x20\x20\x20\x20\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x2e\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x49\x64\x20\x3d\x20\x69\x64\x65\x6e\x74\x69\x74\x79\x2e\x70\x61\x72\x74\x69\x63\x69\x70\x61\x6e\x74\x49\x64\x0a\x20\x20\x29\x0a\x0a\x53\x45\x4c\x45\x43\x54\x0a\x20\x20\x6d\x61\x74\x63\x68\x2e\x2a\x0a\x46\x52\x4f\x4d\x0a\x20\x20\x2f\x2a\x20\x3c\x70\x72\x6f\x6a\x65\x63\x74\x3e\x2e\x3c\x64\x61\x74\x61\x73\x65\x74\x3e\x2e\x3c\x74\x61\x62\x6c\x65\x3e\x20\x2a\x2f\x0a\x20\x20\x60\x25\x5b\x32\x5d\x73\x2e\x25\x5b\x33\x5d\x73\x2e\x25\x5b\x34\x5d\x73\x60\x20\x61\x73\x20\x6d\x61\x74\x63\x68\x0a\x57\x48\x45\x52\x45\x20\x28\x0a\x20\x20\x28\x0a\x20\x20\x20\x20\x53\x45\x4c\x45\x43\x54\x20\x43\x4f\x55\x4e\x54\x28\x2a\x29\x0a\x20\x20\x20\x20\x46\x52\x4f\x4d\x20\x63\x61\x6e\x64\x69\x64\x61\x74\x65\x47\x61\x6d\x65\x73\x0a\x20\x20\x29\x20\x3e\x20\x34\x0a\x20\x20\x41\x4e\x44\x0a\x20\x20\x28\x0a\x20\x20\x20\x20\x53\x45\x4c\x45\x43\x54\x20\x43\x4f\x55\x4e\x54\x28\x44\x49\x53\x54\x49\x4e\x43\x54\x20\x74\x65\x61\x6d\x49\x64\x29\x0a\x20\x20\x20\x20\x46\x52\x4f\x4d\x20\x63\x61\x6e\x64\x69\x64\x61\x74\x65\x47\x61\x6d\x65\x73\x0a\x20\x20\x20\x20\x57\x48\x45\x52\x45\x20\x6d\x61\x74\x63\x68\x2e\x67\x61\x6d\x65\x49\x64\x20\x3d\x20\x63\x61\x6e\x64\x69\x64\x61\x74\x65\x47\x61\x6d\x65\x73\x2e\x67\x61\x6d\x65\x49\x64\x0a\x20\x20\x29\x20\x3d\x20\x31\x0a\x29\x0a")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	err = FS.Mkdir(CTX, "sql/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	f, err = FS.OpenFile(CTX, "sql/team_games.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileSQLTeamGamesSQL)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "sql/team_matches_view.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileSQLTeamMatchesViewSQL)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
