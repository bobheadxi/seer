// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"go.bobheadxi.dev/seer/store"
)

type FakeStore struct {
	AddStub        func(context.Context, string, store.Matches) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 store.Matches
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateStub        func(context.Context, string, *store.Team) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *store.Team
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetMatchesStub        func(context.Context, string) ([]int64, error)
	getMatchesMutex       sync.RWMutex
	getMatchesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getMatchesReturns struct {
		result1 []int64
		result2 error
	}
	getMatchesReturnsOnCall map[int]struct {
		result1 []int64
		result2 error
	}
	GetTeamStub        func(context.Context, string) (*store.TeamWithAnalytics, error)
	getTeamMutex       sync.RWMutex
	getTeamArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getTeamReturns struct {
		result1 *store.TeamWithAnalytics
		result2 error
	}
	getTeamReturnsOnCall map[int]struct {
		result1 *store.TeamWithAnalytics
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) Add(arg1 context.Context, arg2 string, arg3 store.Matches) error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 store.Matches
	}{arg1, arg2, arg3})
	fake.recordInvocation("Add", []interface{}{arg1, arg2, arg3})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addReturns
	return fakeReturns.result1
}

func (fake *FakeStore) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeStore) AddCalls(stub func(context.Context, string, store.Matches) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeStore) AddArgsForCall(i int) (context.Context, string, store.Matches) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStore) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeStore) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStore) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeStore) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Create(arg1 context.Context, arg2 string, arg3 *store.Team) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *store.Team
	}{arg1, arg2, arg3})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1
}

func (fake *FakeStore) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStore) CreateCalls(stub func(context.Context, string, *store.Team) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeStore) CreateArgsForCall(i int) (context.Context, string, *store.Team) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStore) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) GetMatches(arg1 context.Context, arg2 string) ([]int64, error) {
	fake.getMatchesMutex.Lock()
	ret, specificReturn := fake.getMatchesReturnsOnCall[len(fake.getMatchesArgsForCall)]
	fake.getMatchesArgsForCall = append(fake.getMatchesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetMatches", []interface{}{arg1, arg2})
	fake.getMatchesMutex.Unlock()
	if fake.GetMatchesStub != nil {
		return fake.GetMatchesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMatchesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetMatchesCallCount() int {
	fake.getMatchesMutex.RLock()
	defer fake.getMatchesMutex.RUnlock()
	return len(fake.getMatchesArgsForCall)
}

func (fake *FakeStore) GetMatchesCalls(stub func(context.Context, string) ([]int64, error)) {
	fake.getMatchesMutex.Lock()
	defer fake.getMatchesMutex.Unlock()
	fake.GetMatchesStub = stub
}

func (fake *FakeStore) GetMatchesArgsForCall(i int) (context.Context, string) {
	fake.getMatchesMutex.RLock()
	defer fake.getMatchesMutex.RUnlock()
	argsForCall := fake.getMatchesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) GetMatchesReturns(result1 []int64, result2 error) {
	fake.getMatchesMutex.Lock()
	defer fake.getMatchesMutex.Unlock()
	fake.GetMatchesStub = nil
	fake.getMatchesReturns = struct {
		result1 []int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetMatchesReturnsOnCall(i int, result1 []int64, result2 error) {
	fake.getMatchesMutex.Lock()
	defer fake.getMatchesMutex.Unlock()
	fake.GetMatchesStub = nil
	if fake.getMatchesReturnsOnCall == nil {
		fake.getMatchesReturnsOnCall = make(map[int]struct {
			result1 []int64
			result2 error
		})
	}
	fake.getMatchesReturnsOnCall[i] = struct {
		result1 []int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetTeam(arg1 context.Context, arg2 string) (*store.TeamWithAnalytics, error) {
	fake.getTeamMutex.Lock()
	ret, specificReturn := fake.getTeamReturnsOnCall[len(fake.getTeamArgsForCall)]
	fake.getTeamArgsForCall = append(fake.getTeamArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetTeam", []interface{}{arg1, arg2})
	fake.getTeamMutex.Unlock()
	if fake.GetTeamStub != nil {
		return fake.GetTeamStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTeamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetTeamCallCount() int {
	fake.getTeamMutex.RLock()
	defer fake.getTeamMutex.RUnlock()
	return len(fake.getTeamArgsForCall)
}

func (fake *FakeStore) GetTeamCalls(stub func(context.Context, string) (*store.TeamWithAnalytics, error)) {
	fake.getTeamMutex.Lock()
	defer fake.getTeamMutex.Unlock()
	fake.GetTeamStub = stub
}

func (fake *FakeStore) GetTeamArgsForCall(i int) (context.Context, string) {
	fake.getTeamMutex.RLock()
	defer fake.getTeamMutex.RUnlock()
	argsForCall := fake.getTeamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) GetTeamReturns(result1 *store.TeamWithAnalytics, result2 error) {
	fake.getTeamMutex.Lock()
	defer fake.getTeamMutex.Unlock()
	fake.GetTeamStub = nil
	fake.getTeamReturns = struct {
		result1 *store.TeamWithAnalytics
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetTeamReturnsOnCall(i int, result1 *store.TeamWithAnalytics, result2 error) {
	fake.getTeamMutex.Lock()
	defer fake.getTeamMutex.Unlock()
	fake.GetTeamStub = nil
	if fake.getTeamReturnsOnCall == nil {
		fake.getTeamReturnsOnCall = make(map[int]struct {
			result1 *store.TeamWithAnalytics
			result2 error
		})
	}
	fake.getTeamReturnsOnCall[i] = struct {
		result1 *store.TeamWithAnalytics
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMatchesMutex.RLock()
	defer fake.getMatchesMutex.RUnlock()
	fake.getTeamMutex.RLock()
	defer fake.getTeamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Store = new(FakeStore)
